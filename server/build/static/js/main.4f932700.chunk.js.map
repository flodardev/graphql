{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/AddBook.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","getBookQuery","getAuthorsQuery","addBookMutation","BookDetails","React","memo","props","id","bookId","useQuery","variables","loading","error","data","Modal","aria-labelledby","centered","Header","closeButton","Title","book","name","className","genre","Body","author","age","books","map","Footer","Button","onClick","onHide","AddBook","useState","authorId","bookInput","setBookInput","useMutation","addBook","handleChange","event","target","value","prevState","Card","Form","onSubmit","preventDefault","refetchQueries","query","Label","Control","type","onChange","as","defaultValue","authors","key","variant","BookList","setBookId","modal","setModal","handleClick","CardColumns","size","show","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4f932700.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst getBooksQuery = gql`\n\tquery GetBooks {\n\t\tbooks {\n\t\t\tid\n\t\t\tname\n\t\t\tgenre\n\t\t}\n\t}\n`;\n\nconst getBookQuery = gql`\n\tquery GetBook($id: ID!) {\n\t\tbook(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tgenre\n\t\t\tauthor {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tage\n\t\t\t\tbooks {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst getAuthorsQuery = gql`\n\tquery GetAuthors {\n\t\tauthors {\n\t\t\tid\n\t\t\tname\n\t\t}\n\t}\n`;\n\nconst addBookMutation = gql`\n\tmutation AddBook($name: String!, $genre: String!, $authorId: ID!) {\n\t\taddBook(name: $name, genre: $genre, authorId: $authorId) {\n\t\t\tid\n\t\t\tname\n\t\t}\n\t}\n`;\n\nexport { getBooksQuery, getBookQuery, getAuthorsQuery, addBookMutation };\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\n// Query\nimport { getBookQuery } from \"../queries/queries\";\n\n// React-Bootstrap Components\nimport { Modal, Button } from \"react-bootstrap\";\n\nconst BookDetails = React.memo((props) => {\n\tlet id = props.bookId;\n\n\tconst { loading, error, data } = useQuery(getBookQuery, {\n\t\tvariables: { id },\n\t});\n\n\tif (loading) return <p>Loading...</p>;\n\tif (error) return <p>Error</p>;\n\n\treturn (\n\t\t<Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" centered>\n\t\t\t<Modal.Header closeButton>\n\t\t\t\t<Modal.Title id=\"contained-modal-title-vcenter\">\n\t\t\t\t\t{data.book.name}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<small className=\"text-muted\">{data.book.genre}</small>\n\t\t\t\t\t</div>\n\t\t\t\t</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<h5>Author</h5>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>Name: </strong>\n\t\t\t\t\t\t{data.book.author.name}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>Age: </strong>\n\t\t\t\t\t\t{data.book.author.age}\n\t\t\t\t\t</p>\n\t\t\t\t\t<strong>Books by this author:</strong>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{data.book.author.books.map((book) => (\n\t\t\t\t\t\t\t<li>{book.name}</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t<Modal.Footer>\n\t\t\t\t<Button onClick={props.onHide}>Close</Button>\n\t\t\t</Modal.Footer>\n\t\t</Modal>\n\t);\n});\n\nexport default BookDetails;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n\tgetAuthorsQuery,\n\tgetBooksQuery,\n\taddBookMutation,\n} from \"../queries/queries\";\n\n// React-Bootstrap\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\n\nfunction AddBook() {\n\t// States\n\tconst [bookInput, setBookInput] = useState({\n\t\tname: \"\",\n\t\tgenre: \"\",\n\t\tauthorId: \"\",\n\t});\n\n\t// GraphQL Mutation\n\tconst [addBook] = useMutation(addBookMutation);\n\n\t// GraphQL Query\n\tconst { loading, error, data } = useQuery(getAuthorsQuery);\n\tif (loading) return <p>Loading...</p>;\n\tif (error) return <p>Error :(</p>;\n\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target;\n\t\tsetBookInput((prevState) => ({\n\t\t\t...prevState,\n\t\t\t[name]: value,\n\t\t}));\n\t};\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\taddBook({\n\t\t\tvariables: {\n\t\t\t\tname: bookInput.name,\n\t\t\t\tgenre: bookInput.genre,\n\t\t\t\tauthorId: bookInput.authorId,\n\t\t\t},\n\t\t\trefetchQueries: [{ query: getBooksQuery }],\n\t\t});\n\t\tsetBookInput({\n\t\t\tname: \"\",\n\t\t\tgenre: \"\",\n\t\t\tauthorId: \"\",\n\t\t});\n\t};\n\n\treturn (\n\t\t<Card className=\"mb-3\">\n\t\t\t<Card.Body>\n\t\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t\t<Form.Label>Book name:</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tvalue={bookInput.name}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Label>Genre:</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"genre\"\n\t\t\t\t\t\tvalue={bookInput.genre}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Label>Author:</Form.Label>\n\t\t\t\t\t<Form.Control as=\"select\" name=\"authorId\" onChange={handleChange}>\n\t\t\t\t\t\t<option defaultValue>Author</option>\n\t\t\t\t\t\t{data.authors.map((author) => (\n\t\t\t\t\t\t\t<option key={author.id} value={author.id}>\n\t\t\t\t\t\t\t\t{author.name}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Form.Control>\n\t\t\t\t\t<Button className=\"mt-3\" variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n}\n\nexport default AddBook;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { getBooksQuery } from \"../queries/queries\";\n\n// Components\nimport BookDetails from \"./BookDetails\";\nimport AddBook from \"./AddBook\";\n\n// React-Bootstrap Components\nimport { Card, CardColumns, Button } from \"react-bootstrap\";\n\nfunction BookList() {\n\tconst [bookId, setBookId] = useState(\"\");\n\tconst [modal, setModal] = useState(false);\n\tconst { loading, error, data } = useQuery(getBooksQuery);\n\n\tif (loading) return <p>Loading...</p>;\n\tif (error) return <p>Error :(</p>;\n\n\tconst handleClick = (event) => {\n\t\tsetBookId(event.target.value);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<CardColumns>\n\t\t\t\t<AddBook />\n\t\t\t\t{data.books.map((book) => (\n\t\t\t\t\t<Card key={book.id} onClick={handleClick}>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<Card.Title>{book.name}</Card.Title>\n\t\t\t\t\t\t\t<small className=\"text-muted\">{book.genre}</small>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"ml-3 mb-3\"\n\t\t\t\t\t\t\tvalue={book.id}\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => setModal(true)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMore\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Card>\n\t\t\t\t))}\n\t\t\t</CardColumns>\n\t\t\t{modal && (\n\t\t\t\t<BookDetails\n\t\t\t\t\tbookId={bookId}\n\t\t\t\t\tshow={modal}\n\t\t\t\t\tonHide={() => setModal(false)}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default BookList;\n","import React from \"react\";\nimport \"./App.scss\";\n\n// Components\nimport BookList from \"./components/BookList\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App container\">\n\t\t\t<h1>Reading List</h1>\n\t\t\t<BookList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst client = new ApolloClient({\n\turi: \"/graphql\",\n\tcache: new InMemoryCache(),\n});\n\nReactDOM.render(\n\t<ApolloProvider client={client}>\n\t\t<App />\n\t</ApolloProvider>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}